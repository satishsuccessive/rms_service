const { events, Job, Group } = require("brigadier");
events.on("push", (e, project) => {
    var jsonPayload = JSON.parse(e.payload);
    console.log(e);
    // BUILD
    var build = new Job("build", "node");
    build.storage.enabled = true;
    build.env = {
        "REF": jsonPayload.ref
    };
    build.tasks = [
        // Tag new release
        "cd /src",
        "wget -q -O gitversion https://github.com/screwdriver-cd/gitversion/releases/download/v1.1.1/gitversion_linux_amd64",
        "chmod u+x ./gitversion",
        "git fetch --tags -q",
        "if [ \"$REF\" = \"refs/heads/develop\" ]; then ./gitversion --prefix d bump auto && ./gitversion --prefix d show > pipeline_app_version.txt; fi",
        "if [ \"$REF\" = \"refs/heads/develop\" ]; then cp pipeline_app_version.txt /mnt/brigade/share/pipeline_app_version.txt; fi",
        "git push --tags",
    ];
    // UNIT TEST
    var unitTest = new Job("unit-test", "node");
    unitTest.storage.enabled = false;
    unitTest.env = {
        "REF": jsonPayload.ref
    };
    unitTest.tasks = [
        "echo unit testing $REF",
    ];
    // STATIC ANALYSIS
    var staticAnalysis = new Job("static-analysis", "node");
    staticAnalysis.storage.enabled = true;
    staticAnalysis.env = {
        "REF": jsonPayload.ref
    };
    staticAnalysis.tasks = [
        "echo Performing static analysis on $REF",
    ];
    // APPROVAL FOR LIBRARY - merge to master only
    var approval = new Job("approval", "node");
    approval.storage.enabled = true;
    approval.env = {
        "REF": jsonPayload.ref
    };
    approval.tasks = [
        "export APP_VER=`cat /mnt/brigade/share/pipeline_app_version.txt`",
        "echo $APP_VER | sed 's/d//g'",
        "cd /src",
        "git config --global user.email 'dandevops@az.devops.gdpdentsu.net'",
        "git config --global user.name 'DAN Devops'",
        "git status",
        "git remote -v",
        "git fetch --tags -q",
        "git checkout -b pipeline-${APP_VER}",
        "git fetch",
        "git branch",
        "echo remotes",
        "git branch -r",
        "git checkout master",
        "git merge pipeline-${APP_VER}",
        "git tag `echo $APP_VER | sed 's/d//g'`",
        "git push && git push --tags",
    ];
    // Run relevant stages   
    if (e.type == 'push') {
        if (jsonPayload.ref == "refs/heads/develop") {
            staticAnalysis.run();
            Group.runEach([build, unitTest, approval]);
        }
        else if (jsonPayload.ref == "refs/heads/master") {
            console.log("Master - ignoring");
        }
        else {
            staticAnalysis.run();
            Group.runEach([build]);
        }
    }
    else if (e.type == 'pull_request') {
        console.log("PULL REQUEST");
    }
});
//# sourceMappingURL=brigade.js.map