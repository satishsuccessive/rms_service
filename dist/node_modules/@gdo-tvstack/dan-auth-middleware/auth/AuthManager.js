"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const authentication_1 = require("./authentication");
const AuthorizationManager_1 = require("./authorization/AuthorizationManager");
class AuthManager {
    static getInstance() {
        if (!AuthManager.instance) {
            AuthManager.instance = new AuthManager();
        }
        return AuthManager.instance;
    }
    init(config) {
        AuthManager.config = config;
    }
    auth(req, res, next) {
        if (AuthManager.config.active) {
            const authenticationManager = authentication_1.OktaAuthenticationManager.getInstance();
            const authorizationManager = AuthorizationManager_1.default.getInstance();
            authenticationManager.init(AuthManager.config.authentication);
            authorizationManager.init(AuthManager.config.authorization);
            authenticationManager.authenticate(req)
                .then((jwt) => {
                const userId = jwt.claims.uid;
                const userEmail = jwt.claims.sub;
                const accessToken = req.header("Authorization");
                res.locals.userId = userId;
                res.locals.userEmail = userEmail;
                if (AuthManager.config.authorization.getAuthorizations) {
                    const applicationId = AuthManager.config.authorization.application;
                    const userRoleDomain = AuthManager.config.authorization.openDomain ? { userId, accessToken, userEmail } : { userId, applicationId, accessToken, userEmail };
                    AuthorizationManager_1.default.userRolesGetter(userRoleDomain)
                        .then((userRoles) => {
                        res.locals.userRoles = userRoles;
                        authorizationManager.authorize(req, res, userRoles).then((authorized) => {
                            if (authorized) {
                                next();
                            }
                            else {
                                console.log("403 - User is not authorized to access this api");
                                res.status(403).send({ message: "Unauthorized" });
                            }
                        }).catch((err) => {
                            console.log("500 - Error Trying to get authorizations:", err);
                            res.status(500).send(err);
                        });
                    })
                        .catch((err) => {
                        console.log("500 - Error Trying to get authorizations:", err);
                        res.status(500).send(err);
                    });
                }
                else {
                    next();
                }
            })
                .catch((err) => {
                console.log("401 - Error verifying Access Token:", err);
                res.status(401).send(err);
            });
        }
        else {
            next();
        }
    }
    injectRoleProvider(rolesGetter, userRolesGetter) {
        AuthorizationManager_1.default.getInstance(); //this makes sure a future getInstance does not overwrite the injector
        AuthorizationManager_1.default.rolesGetter = rolesGetter;
        AuthorizationManager_1.default.userRolesGetter = userRolesGetter;
    }
}
exports.default = AuthManager;
//# sourceMappingURL=AuthManager.js.map