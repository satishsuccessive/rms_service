"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class OktaAuthenticationManager {
    static getInstance() {
        if (!OktaAuthenticationManager.instance) {
            OktaAuthenticationManager.instance = new OktaAuthenticationManager();
        }
        return OktaAuthenticationManager.instance;
    }
    init(config) {
        OktaAuthenticationManager.config = config;
    }
    authenticate(req) {
        return __awaiter(this, void 0, void 0, function* () {
            const OktaJwtVerifier = require('@okta/jwt-verifier');
            const oktaJwtVerifier = new OktaJwtVerifier({
                issuer: OktaAuthenticationManager.config.issuer,
                assertClaims: {
                    aud: OktaAuthenticationManager.config.clientId,
                },
            });
            const authHeader = req.headers["authorization"] || '';
            const match = authHeader.match(/Bearer (.+)/);
            if (!match) {
                throw { err: { message: "Bad token" } };
            }
            const accessToken = match && match.length > 0 ? match[1] : {};
            return oktaJwtVerifier.verifyAccessToken(accessToken).catch((err) => {
                throw { err: err.message };
            });
        });
    }
}
exports.default = OktaAuthenticationManager;
//# sourceMappingURL=OktaAuthenticationManager.js.map